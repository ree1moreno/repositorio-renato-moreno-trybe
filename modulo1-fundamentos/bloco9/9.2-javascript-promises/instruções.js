// Como primeiro exercÃ­cio, vamos usar a funÃ§Ã£o fetch , que vimos na aula ao vivo, para criar um site simples com um gerador de piadas ruins! . Como? Vamos praticar!
// Primeiro, veja o manual da API do site icanhazdadjoke.com . Ele esclarece como fazer as requisiÃ§Ãµes ao serviÃ§o de piadas. Por hora, pode sÃ³ passar o olho; agora vamos entender como funciona essa API :
// Para comeÃ§ar, vamos fazer uma requisiÃ§Ã£o via browser. Visite o site icanhazdadjoke.com , e perceba que ele devolve uma pÃ¡gina HTML com uma piada aleatÃ³ria.
// Em seguida, no terminal, vamos fazer a requisiÃ§Ã£o: curl -H "Accept: text/html" "https://icanhazdadjoke.com/" . Perceba que o retorno Ã© um HTML idÃªntico ao de uma requisiÃ§Ã£o via browser com uma piada aleatÃ³ria.
// Para a prÃ³xima requisiÃ§Ã£o, vamos usar o comando: curl -H "Accept: text/plain" "https://icanhazdadjoke.com/" . Veja que agora recebemos apenas a piada aleatÃ³ria em formato texto.
// Por fim, faÃ§a a requisiÃ§Ã£o: curl -H "Accept: application/json" "https://icanhazdadjoke.com/" . Agora a API retorna um objeto no formato JSON. Perceba que, dependendo do que passamos na chave Accept: no header, definido por -H no comando, o serviÃ§o nos retorna uma resposta diferente.
// Utilize o HTML e o js a seguir como base:

// Agora vamos tentar fazer as requisiÃ§Ãµes a API usando fetch. Essa funÃ§Ã£o recebe dois parÃ¢metros:
// O endereÃ§o para o qual a requisiÃ§Ã£o serÃ¡ feita, ou seja, a url do serviÃ§o.
// Um objeto contendo as especificaÃ§Ãµes da requisiÃ§Ã£o. Para essa API , atribuiremos a esse objeto as chaves method e headers

// O segundo parÃ¢metro myObject define o tipo de request method: 'GET' e o formato da resposta headers: { 'Accept': 'application/json' } , como visto nas requisiÃ§Ãµes via curl .
// A funÃ§Ã£o fetch Ã© uma Promise e, como tal, dependendo de seus desdobramentos, podemos encadear procedimentos a serem feitos, utilizando as clÃ¡usulas .then (em caso de sucesso) e .catch (em caso de falha). A requisiÃ§Ã£o fetch retorna um objeto Response . Utilizando .then , verifique a estrutura da resposta usando um console.log na response retornada pelo fetch.
// Viu a response? AtÃ© recebemos uma resposta do serviÃ§o, mas como Ã© que eu consigo retirar o texto da piada daÃ­ ðŸ¤”?
// Para isso, usamos o mÃ©todo .json() na resposta da API . Esse mÃ©todo converte o conteÃºdo do body da Response e retorna uma outra Promise , que, quando bem-sucedida, retorna um JSON contendo as informaÃ§Ãµes da piada.
// A partir do fetch , troque o console.log() anterior pelo mÃ©todo .json() e imprima os dados da requisiÃ§Ã£o.

// apiScript.js     
const API_URL = 'https://icanhazdadjoke.com/';

const fetchJoke = () => {
  const myObject = {
    method: 'GET',
    headers: { 'Accept': 'application/json' }
  };

  fetch(API_URL, myObject)
    .then(response => response.json())
    .then(data => console.log(data))
};

window.onload = () => fetchJoke();